Solution1 passed
Process
    search for right max and left max for every grid

    use the minimum of 2 max nums to minus the depth of every grid
    to get water traped in width 1

    add all grids' results up

Complexity
    traverse every grid twice, also traverse in searching max nums
    O(n^2)

Solution2 failed
Process
    traverse every level(height = 0 -> max) of the map until no "wall"(black blocks)

    start to count water blanks when meeting the first wall, end when meeting the last
    (how to set the end condition??)

    add total blanks of all levels up

Complexity
    maxheight * lengthn
    O(n) when n >> height

Solution3(improved version of Solution2)
Process
    count the sum grid covered by wall and water:
        use two pointers named left & right to search left and right border for each layer

    water = sum - wall

Complexity
    O(n)

Solution4  dynamic planning
Process
    traverse and save leftmax and rightmax of every grid respectively

    traverse every grid using:
        water += Math.min(leftmax, rightmax) - height[this grid]

Complexity
    O(n)